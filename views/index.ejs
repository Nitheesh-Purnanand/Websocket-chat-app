<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>TALE</title>
    <link href="/index.css" rel="stylesheet" >
</head>
<body>
    <div class="header"><img src="./whatsapp-brands-solid (1).svg"><p class="wsp">TALE</p></div>
    <div class="vt">
        <div class="vto">
        <div class="ch"><h1>Chats</h1></div>
        <div class="box"><input type="text" class="sbox" placeholder="Search or start a new chat"></div>
         
         <div class="contact">
            <div class="ig"> <img src="/user-solid (1).svg"></div>
            <p class="name name1"><%= name %></p>
         </div>
         <% for (let i = 0; i < rem_users.length; i++) { %>
            <div class="contact">
            <div class="ig"> <img src="/user-solid (1).svg"></div>
            <p class="name"><%= rem_users[i].name %></p>
            </div>
            
         <% } %>
    </div>
    <div class="main">
        <div class="messages">
            <% for(let i=0;i<=5;i++){ %>
                <% } %>
        </div>
        
        <div class="input-container">
            <input type="text" name="chat_box" class="chat_box">
            <input type="submit" value="send" class="send">
        </div>
        
    </div>

    <script src="https://cdnjs.cloudflare.com/ajax/libs/socket.io/4.8.1/socket.io.js" integrity="sha512-8BHxHDLsOHx+flIrQ0DrZcea7MkHqRU5GbTHmbdzMRnAaoCIkZ97PqZcXJkKZckMMhqfoeaJE+DNUVuyoQsO3Q==" crossorigin="anonymous" referrerpolicy="no-referrer"></script>
    <script>

const socket = io();

const name1 = document.querySelector(".name1").innerText;

socket.on("connect", () => {
    console.log("Connected to the server");
    socket.emit("message", { text: socket.id, name: name1 });
});

socket.on("reply", (data) => {
    console.log("Server reply:", data);
});

function display(chat_box, isSender) {
    const messageElement = document.createElement("div");
    messageElement.textContent = chat_box;
    messageElement.style.backgroundColor = isSender ? "rgb(168, 211, 249)" : "#4e4b4b";
    messageElement.style.textAlign = isSender ? "end" : "start";
    messageElement.style.color = isSender ? "black" : "white";
    messageElement.style.fontSize = "3vh";
    messageElement.style.position = "relative";
    messageElement.style.padding = "10px";
    messageElement.style.margin = "5px";
    messageElement.style.borderRadius = "10px";
    document.querySelector(".messages").appendChild(messageElement);
}

function display3(chats) {
    const messagesContainer = document.querySelector(".messages");
    messagesContainer.innerHTML = "";
    chats.forEach(chat => {
        const isSender = chat.from === name1;
        display(chat.message, isSender);
    });
}

document.querySelector(".send").addEventListener("click", () => {
    const chatBoxInput = document.querySelector(".chat_box");
    const chat_box = chatBoxInput.value.trim();

    if (!chat_box) {
        alert("Message cannot be empty!");
        return;
    }

    socket.emit("sending-msg", { name1, chat_box });
    display(chat_box, true);
    chatBoxInput.value = "";
});


document.querySelector(".vt").addEventListener("click", event => {
    const contact = event.target.closest(".contact");
    if (contact) {
        const to_name = contact.querySelector(".name").innerText;
        socket.emit("details", { to_name, from_name: name1, from_id: socket.id });
        
        socket.off("display-msg");
        socket.off("receiving-msg");

        socket.on("display-msg", data => {
            display3(data.tot_chats);
        });

        socket.on("receiving-msg", msg => {
            display(msg, false);
        });
    }
});

socket.on("receive-msg", chat_box => {
    display(chat_box, false);
});


    </script>
</body>
</html>